// Copyright (c) 2020 University of Florida
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Greg Stitt
// University of Florida
//
// Description: This application demonstrates a DMA AFU where the FPGA transfers
// data from an input array into an output array.
// 
// The example demonstrates an extension of the AFU wrapper class that uses
// AFU::malloc() to dynamically allocate virtually contiguous memory that can
// be accessed by both software and the AFU.

// INSTRUCTIONS: Change the configuration settings in config.h to test 
// different types of data.

#include <cstdlib>
#include <iostream>
#include <cmath>

#include <opae/utils.h>

#include "AFU.h"
// Contains application-specific information
#include "config.h"
// Auto-generated by OPAE's afu_json_mgr script
#include "afu_json_info.h"
#include "CardInterface.h"

/* unneeded for now but keep in here as reference
#define CACHE_LINE_BYTES 64
#define NUM_CACHE_LINES 4096
*/

using namespace std;


void copyToCard(void* hostSrc, uint64_t cardDest, uint64_t len);
void copyFromCard(void* hostDst, uint64_t cardSrc, uint64_t len);

void resetCores(uint64_t cores);
void haltCores(uint64_t cores);
void unhaltCores(uint64_t cores);
auto checkDirty() -> uint64_t;

void loadMemoryImage(MemSystem& dest, const std::string& path, uint64_t num_bytes);

int main(int argc, char *argv[]) {

  if (!checkUsage(argc, argv)) { // TODO check usage for new inputs
    printUsage(argv[0]);
    return EXIT_FAILURE;
  }
``
  uint8_t* hostMem;
 

  try {
    // Create an AFU object to provide basic services for the FPGA. The 
    // constructor searchers available FPGAs for one with an AFU with the
    // the specified ID
    AFU afu(AFU_ACCEL_UUID); 
    uint8_t* cardMem;
    CardInterface iface(std::move(afu), cardMem);

    bool failed = false;
    uint64_t resultAddr = 0; // TODO enter this when starting program
    uint64_t resultSize = 0; // TODO enter this when starting program (in number of bytes)
    uint8_t* result = malloc(resultSize);


     loadMemoryImage(hostMem, &argv[1], argv[2]); // can loadm mem right into card if needed/wanted
    //for (unsigned test=0; test < num_tests; test++) {
 
      iface.copyToCard(hostMem, 0, sizeof(*hostMem));
      iface.sendStart();
      iface.resetCores(1);
      iface.unahltCores(1);

      // Wait until the FPGA is done.
      while (iface.checkDirty() == 0) {
#ifdef SLEEP_WHILE_WAITING
	this_thread::sleep_for(chrono::milliseconds(SLEEP_MS));
#endif
      }
        
      iface.haltCores(1);
      iface.copyFromCard(result, resultAddr, resultSize);

      // TODO output results to file????
    
      // Free the allocated memory.
      ~iface();
      free(result);
    //} 

    if (failed) {
      cout << "DMA tests failed." << endl;
      return EXIT_FAILURE;
    }

    cout << "All DMA Tests Successful!!!" << endl;
    return EXIT_SUCCESS;
  }
  // Exception handling for all the runtime errors that can occur within 
  // the AFU wrapper class.
  catch (const fpga_result& e) {    
    
    // Provide more meaningful error messages for each exception.
    if (e == FPGA_BUSY) {
      cerr << "ERROR: All FPGAs busy." << endl;
    }
    else if (e == FPGA_NOT_FOUND) { 
      cerr << "ERROR: FPGA with accelerator " << AFU_ACCEL_UUID 
	   << " not found." << endl;
    }
    else {
      // Print the default error string for the remaining fpga_result types.
      cerr << "ERROR: " << fpgaErrStr(e) << endl;    
    }
  }
  catch (const runtime_error& e) {    
    cerr << e.what() << endl;
  }
  catch (const opae::fpga::types::no_driver& e) {
    cerr << "ERROR: No FPGA driver found." << endl;
  }

  return EXIT_FAILURE;
}


void loadMemoryImage(void* dest, const std::string& path, uint64_t num_bytes) { // not sure if void* type is okay here
    if (!std::filesystem::is_regular_file(path)) {
        throw runtime_error("[!] `{}` is not a file\n", path);
    }
    std::ifstream fBin(path, std::ios::binary);
    if (!fBin.is_open()) {
        throw runtime_error("[!] can't open `{}`\n", path);
    }
    // WARNING WARNING TODO(erin): only works on little-endian architectures
    fBin.read(dest, num_bytes);
}

// Returns unsigned long representation of string str.
// Throws an exception if str is not a positive integer.
unsigned long stringToPositiveInt(char *str) {

  char *p;
  long num = strtol(str, &p, 10);  
  if (p != 0 && *p == '\0' && num > 0) {
    return num;
  }

  throw runtime_error("String is not a positive integer.");
  return 0;  
}

bool checkUsage(int argc, *argv[]) { // could use some work
    if (argc == 3) {
    try {
      stringToPositiveInt(argv[1]);
    }
    catch (const runtime_error& e) {    
      return false;
    }
  }
  else {
    return false;
  }
}

void printUsage(char *name) {

  cout << "Usage: " << name << " <filename of binary mem file> <number of bytes in binary mem file>\n";
}